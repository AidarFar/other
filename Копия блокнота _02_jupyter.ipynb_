{"cells":[{"cell_type":"markdown","metadata":{"id":"T-WJ471SNaqd"},"source":["\n","## 1. О том, что такое Jupyter Notebook\n"]},{"cell_type":"markdown","metadata":{"id":"jtPcPXnkJeCm"},"source":["[\"Why Jupyter is data scientists’ computational notebook of choice\"](https://www.nature.com/articles/d41586-018-07196-1) — статья с таким заголовком вышла в октябрьском номере `Nature` в 2018 году. Она посвящена `Jupyter Notebook` — опенсорсному веб-приложению для интерактивной разработки, которое за последние несколько лет покорило сердца миллионов и стало де-факто стандартом в аналитике, науке о данных, машинном обучении и много где ещё. Количество `.ipynb`-файлов на `GitHub` выросло с $2 \\cdot 10^5$ в 2015 году до $2.5 \\cdot 10^6$ в 2018. Ниже мы разберём основные причины такой взрывной популярности:\n","\n","### Лабораторный журнал 21 века\n","\n","Работа аналитика или учёного отличается от индустриальной разработки отсутствием чёткого техзадания. В этих сферах правильная постановка задачи это уже половина решения.  На начальную фазу — тщательный анализ исходных данных (`exploratory data analysis (EDA)`) и последующую постановку гипотез — уходит много времени. Как следствие, до самого конца неясно, как организовать процесс разработки: что в итоге важно, а о чём можно будет забыть. В таких условиях тратить силы на скурпулёзное написание кода бессмысленно — на первый план выходит умение быстро прототипировать, ставить эксперименты. Кроме того, свои результаты приходится постоянно презентовать как коллегам, там и заказчику или начальству. `Jupyter Notebook` убивает этих двух зайцев одним выстрелом:\n","   \n","![](https://drive.google.com/uc?export=view&id=1P_CBGwCfpYe9IZg_AeY25jmu05d2qvQh)\n","\n","\n","\n","По своей сути `Jupyter` это интерактивный лабораторный журнал: он позволяет создавать отчёт с помощью `markdown` с формулами из `latex`, писать и запускать в нем код, дополнять отчет иллюстрациями, в том числе интерактивными, пересчитывать всё на лету и обмениваться результатами в читаемом формате. Это дало новую жизнь парадигме **reproducible research** — в формате `.ipynb` или `R-Markdown` пишут [статьи](https://github.com/jupyter/jupyter/wiki/A-gallery-of-interesting-Jupyter-Notebooks#reproducible-academic-publications) и [даже книги](https://github.com/jupyter/jupyter/wiki/A-gallery-of-interesting-Jupyter-Notebooks#entire-books-or-other-large-collections-of-notebooks-on-a-topic), где заинтересованный читатель может сразу же воспроизводить описанные результаты. Автор не уверен, что впечатляет его больше — потенциальный полёт человечества к Юпитеру или то, насколько более демократичной `Jupyter Notebook` сделал высокую науку. Которая, к слову, страдает от того, что [70% учёных не смогли воспроизвести чужие результаты, а ещё 50% — свои](https://www.nature.com/news/1-500-scientists-lift-the-lid-on-reproducibility-1.19970) согласно опросу в `Nature`.\n","\n","### Нелинейная последовательность исполнения\n","\n","`Jupyter` позволяет запускать клетки с кодом в произвольном порядке и, в отличие от `IPython`, в нём это делать удобно. Конечно, это повышает требования к разработчику, который должен помнить, какая конкретно последовательность ячеек решает задачу, и провоцирует писать очень плохой код, но в реалиях, когда полный перезапуск пайплайна требует нескольких часов на суперкомпьютере, это не прихоть, а необходимость.\n","\n","### Вавилонская башня от программирования\n","\n","Вопреки расхожему мнению, `Jupyter` поддерживает не только `Julia`, `Python` и `R` (`Ju`-`Py`-`teR`, именно потому), но [более 40 языков](https://jupyter.org), включая `C++`, да-да, компилируемый язык, [check it out](https://quantstack.net/index.html). Более того, для того, чтобы писать код на нескольких языках одновременно, обычно это `Bash`, `Python` и `R`, не нужно создавать разные ноутбуки. Это инструмент, который не ограничивает возможности разработчика.\n","\n","### Переносимость и платформонезависимость\n","\n","`Jupyter` позволяет развернуть дружелюбный интерфейс на любой удалённой машине, от учебного сервера до гигантской распределённой `map-reduce` сети. Учитывая, что работать с данными на своём ноутбуке почти никогда не приходится, что либо нельзя контракту, либо в оперативку не влезает, возможность оставить в прошлом сумрачную серверную консоль многие восприняли с облегчением. В сочетании с инструментами в духе `conda`, `jupyter` позволяет развернуть привычное и настроенное под себя окружение, не задумываясь о том, с каким железом и в какой системе приходится работать. Более того, `Jupyter Hub` позволяет создать точку входа, через которую над проектом могут совместно работать несколько человек. Это позволяет специалисту настроить окружение один раз, после чего им смогут пользоваться сотни человек. Неудивительно, что многие онлайн-курсы переходят на формат `jupyter`-ноутбуков.\n","\n","### Вывод\n","\n","`Jupyter`-ноутбуки это мощный инструмент, который облегчит вашу жизнь. Тем не менее, работа с ним требует дисциплины. Далее разберём как `best practices`, так и распространённые антипаттерны, которых следует избегать.\n"]},{"cell_type":"markdown","metadata":{"id":"tr2NAI_gNaqm"},"source":["## 2. Основы\n","\n","Для того, чтобы поднять `jupyter`-сервер, активируйте `conda-env` и наберите в терминале:\n","\n","```bash\n","jupyter notebook\n","```\n","Когда вы откроете `jupyter`-ноутбук, в меню `Help` можно будет найти интерактивные вводные руководства.  Советуем ознакомиться с ними, если интерфейс вам вновинку.  \n","\n","Всего ячейки бывают трёх типов:\n","- `code` — собственно, код;\n","- `markdown` — текст с формулами на `latex` (в одинарных или двойных $);\n","- `raw` — неформатированный текст.\n","\n","Изменить тип можно либо в меню (`Cell` —> `Cell Type`), либо с помощью клавиатурных сокращений (см. ниже).  В целом, базовый интерфейс довольно интуитивный, в нём полезно разобраться самостоятельно."]},{"cell_type":"markdown","metadata":{"id":"d8sog2UYNaqr"},"source":["## 4. Работа с командной строкой `Jupyter`\n","\n","### Command mode\n","\n","В `jupyter` есть `command mode` — режим, где можно вводить команды для быстрого редактирования текста. Как и в `vim`, из которого эта концепция была позаимствована, его можно активировать кнопкой `Esc`, после чего возможны варианты. `Esc + h` откроет справку:\n","\n"]},{"cell_type":"markdown","metadata":{"id":"BlmRg9umNaqs"},"source":["В ней перечислено много команд, из которых чаще всего используются такие:\n","\n","- `Esc + F` — найти и заменить;\n","\n","\n","- `Esc + I` — прервать исполнение;\n","- `Esc + 0` — перезапустить ядро;\n","\n","\n","- `Esc + Shift + ↑↓` — выделить ячейку выше/ниже текущей;\n","\n","\n","- `Esc + Ctrl + Enter` — запустить выделенные ячейки (в естественном порядке);\n","\n","\n","- `Esc + D + D` — удалить все выделенные ячейки (включая текущую);\n","- `Esc + Z` — отменить удаление ячеек;\n","- `Esc + C` — скопировать выделенные ячейки;\n","- `Esc + X` — вырезать выделенные ячейки;\n","- `Esc + V` — вставить ранее скопированные ячейки;\n","- `Esc + A` — вставить ячейку выше;\n","- `Esc + B` — вставить ячейку ниже;\n","- `Esc + Shift + M` — объединить выделенные ячейки (или текущую ячейку с нижней);\n","\n","\n","- `Esc + M` — заменить код на markdown;\n","- `Esc + Y` — наоборот, markdown —> код."]},{"cell_type":"markdown","metadata":{"id":"z92ad4YINaqs"},"source":["### Edit mode\n","\n","Эти сокращения доступны в редакторе. Здесь всё стандартно. Если вы не привыкли пользоваться такими сокращениями, то настоятельно рекомендуем потратить время и научиться: это сэкономит вам много времени в будущем.\n"]},{"cell_type":"markdown","metadata":{"ExecuteTime":{"end_time":"2019-10-07T23:23:06.687886Z","start_time":"2019-10-07T23:23:06.685265Z"},"id":"wsv9p64gNaqs"},"source":["Самые полезные команды (кроме очевидных) таковы:\n","\n","- `Shift + Tab` — показать описание функции, курсор должен стоять сразу после открывающей скобки;\n","\n","\n","- `Ctrl + /` — закомментировать строку;\n","- `Ctrl + D` — удалить строку;\n","\n","\n","- `Ctrl + ↑` — перейти к началу ячейки;\n","- `Ctrl + ↓` — перейти к концу ячейки;\n","- `Ctrl + Shift + -` — разбить ячейку по текущей строке;\n","\n","\n","- `Shift + ↑↓` — выделить ячейку выше/ниже текущей;\n","- `Ctrl + Enter` — запустить выделенные ячейки;\n","- `Shift + Enter` — запустить ячейку и перейти на одну ниже, что удобно, когда последовательно запускаете сразу много."]},{"cell_type":"markdown","metadata":{"id":"i9f9HyxFNaqt"},"source":["## 5. Магия `Jupyter`\n","\n","<div>\n","<img src=\"attachment:jupyter_magics.jpg\" width=\"500\"/>\n","</div>\n","\n","`jupyter magics` — метаязык, команды которого обычно начинаются с `%` или `%%`.Работают они или нет — зависит от реализации. Стандартные `jupyter-magics` поставляются с ядром `IPython`. Для других языков или ядер набор команд может быть другим.  \n","\n","Давайте посмотрим, какие команды есть.  \n","\n","*P.S. Если вам захочется узнать больше, можете посмотреть [замечательный доклад с PyCon Canada](https://www.youtube.com/watch?v=zxkdO07L29Q).*"]},{"cell_type":"code","execution_count":null,"metadata":{"ExecuteTime":{"end_time":"2019-10-09T17:55:19.295575Z","start_time":"2019-10-09T17:55:19.284258Z"},"id":"WVyTESqPNaqt","outputId":"7f392c28-97d7-429d-d88f-d65d5de03fdc","colab":{"base_uri":"https://localhost:8080/","height":295},"executionInfo":{"status":"ok","timestamp":1663060431574,"user_tz":-180,"elapsed":322,"user":{"displayName":"Sotik Fotik","userId":"11250601100287929999"}}},"outputs":[{"output_type":"execute_result","data":{"text/plain":["Available line magics:\n","%alias  %alias_magic  %autoawait  %autocall  %automagic  %autosave  %bookmark  %cat  %cd  %clear  %colors  %conda  %config  %connect_info  %cp  %debug  %dhist  %dirs  %doctest_mode  %ed  %edit  %env  %gui  %hist  %history  %killbgscripts  %ldir  %less  %lf  %lk  %ll  %load  %load_ext  %loadpy  %logoff  %logon  %logstart  %logstate  %logstop  %ls  %lsmagic  %lx  %macro  %magic  %man  %matplotlib  %mkdir  %more  %mv  %notebook  %page  %pastebin  %pdb  %pdef  %pdoc  %pfile  %pinfo  %pinfo2  %pip  %popd  %pprint  %precision  %prun  %psearch  %psource  %pushd  %pwd  %pycat  %pylab  %qtconsole  %quickref  %recall  %rehashx  %reload_ext  %rep  %rerun  %reset  %reset_selective  %rm  %rmdir  %run  %save  %sc  %set_env  %shell  %store  %sx  %system  %tb  %tensorflow_version  %time  %timeit  %unalias  %unload_ext  %who  %who_ls  %whos  %xdel  %xmode\n","\n","Available cell magics:\n","%%!  %%HTML  %%SVG  %%bash  %%bigquery  %%capture  %%debug  %%file  %%html  %%javascript  %%js  %%latex  %%markdown  %%perl  %%prun  %%pypy  %%python  %%python2  %%python3  %%ruby  %%script  %%sh  %%shell  %%svg  %%sx  %%system  %%time  %%timeit  %%writefile\n","\n","Automagic is ON, % prefix IS NOT needed for line magics."],"application/json":{"line":{"automagic":"AutoMagics","autocall":"AutoMagics","alias_magic":"BasicMagics","lsmagic":"BasicMagics","magic":"BasicMagics","page":"BasicMagics","pprint":"BasicMagics","colors":"BasicMagics","xmode":"BasicMagics","quickref":"BasicMagics","doctest_mode":"BasicMagics","gui":"BasicMagics","precision":"BasicMagics","notebook":"BasicMagics","save":"CodeMagics","pastebin":"CodeMagics","loadpy":"CodeMagics","load":"CodeMagics","edit":"KernelMagics","config":"ConfigMagics","prun":"ExecutionMagics","pdb":"ExecutionMagics","debug":"ExecutionMagics","tb":"ExecutionMagics","run":"ExecutionMagics","timeit":"ExecutionMagics","time":"ExecutionMagics","macro":"ExecutionMagics","load_ext":"ExtensionMagics","unload_ext":"ExtensionMagics","reload_ext":"ExtensionMagics","history":"HistoryMagics","recall":"HistoryMagics","rerun":"HistoryMagics","logstart":"LoggingMagics","logstop":"LoggingMagics","logoff":"LoggingMagics","logon":"LoggingMagics","logstate":"LoggingMagics","pinfo":"NamespaceMagics","pinfo2":"NamespaceMagics","pdef":"NamespaceMagics","pdoc":"NamespaceMagics","psource":"NamespaceMagics","pfile":"NamespaceMagics","psearch":"NamespaceMagics","who_ls":"NamespaceMagics","who":"NamespaceMagics","whos":"NamespaceMagics","reset":"NamespaceMagics","reset_selective":"NamespaceMagics","xdel":"NamespaceMagics","alias":"OSMagics","unalias":"OSMagics","rehashx":"OSMagics","pwd":"OSMagics","cd":"OSMagics","env":"OSMagics","set_env":"OSMagics","pushd":"OSMagics","popd":"OSMagics","dirs":"OSMagics","dhist":"OSMagics","sc":"OSMagics","sx":"OSMagics","system":"OSMagics","bookmark":"OSMagics","pycat":"OSMagics","pip":"Other","conda":"PackagingMagics","matplotlib":"PylabMagics","pylab":"PylabMagics","killbgscripts":"ScriptMagics","autoawait":"AsyncMagics","ed":"Other","hist":"Other","rep":"Other","clear":"KernelMagics","less":"KernelMagics","more":"KernelMagics","man":"KernelMagics","connect_info":"KernelMagics","qtconsole":"KernelMagics","autosave":"KernelMagics","mkdir":"Other","rmdir":"Other","mv":"Other","rm":"Other","cp":"Other","cat":"Other","ls":"Other","ll":"Other","lf":"Other","lk":"Other","ldir":"Other","lx":"Other","store":"StoreMagics","shell":"Other","tensorflow_version":"Other"},"cell":{"js":"DisplayMagics","javascript":"DisplayMagics","latex":"DisplayMagics","svg":"DisplayMagics","html":"DisplayMagics","markdown":"DisplayMagics","prun":"ExecutionMagics","debug":"ExecutionMagics","timeit":"ExecutionMagics","time":"ExecutionMagics","capture":"ExecutionMagics","sx":"OSMagics","system":"OSMagics","!":"OSMagics","writefile":"OSMagics","script":"ScriptMagics","sh":"Other","bash":"Other","perl":"Other","ruby":"Other","python":"Other","python2":"Other","python3":"Other","pypy":"Other","SVG":"Other","HTML":"Other","file":"Other","bigquery":"Other","shell":"Other"}}},"metadata":{},"execution_count":2}],"source":["%lsmagic"]},{"cell_type":"markdown","metadata":{"id":"aVaOKXLVNaqv"},"source":["А если вы хотите почитать краткую справку по `IPython`, используйте команду"]},{"cell_type":"code","execution_count":null,"metadata":{"ExecuteTime":{"end_time":"2019-10-09T17:55:19.887868Z","start_time":"2019-10-09T17:55:19.876857Z"},"id":"F5L9EfTfNaqv"},"outputs":[],"source":["%quickref"]},{"cell_type":"markdown","metadata":{"id":"AtOwKItbNaqw"},"source":["Видно, что команды делятся на два типа: `line magics` и `cell magics`. Как следует из названия, разница между ними в том, что `cell magics` влияют на состояние всей ячейки, и работают только если написаны в самом её начале, в то время как `line magics` могут быть написаны в любом месте и либо влияют на строку с кодом, скажем, замеряют время исполнения, как `%timeit`, либо выполняют какую-то системную команду (как `%ls`). Если вы забыли, что делает конкретная команда, то добавьте перед ней знак вопроса — откроется справка."]},{"cell_type":"code","execution_count":null,"metadata":{"ExecuteTime":{"end_time":"2019-10-09T17:55:20.256519Z","start_time":"2019-10-09T17:55:20.246267Z"},"id":"vo8BcZHFNaqw"},"outputs":[],"source":["?%time"]},{"cell_type":"markdown","metadata":{"ExecuteTime":{"end_time":"2019-10-07T23:55:12.935642Z","start_time":"2019-10-07T23:54:27.151676Z"},"id":"Fm2QDIV-Naqw"},"source":["К слову, таким же образом можно вызвать справку для произвольной функции. Синтаксис привычен тем, кто работал с `R`:"]},{"cell_type":"code","execution_count":null,"metadata":{"ExecuteTime":{"end_time":"2019-10-07T23:56:53.714515Z","start_time":"2019-10-07T23:56:53.695531Z"},"id":"yZK6m9bVNaqx"},"outputs":[],"source":["?range"]},{"cell_type":"markdown","metadata":{"id":"U0dJrR5yNaqx"},"source":["Давайте посмотрим на эти команды поближе:"]},{"cell_type":"markdown","metadata":{"id":"eULAgggSNaq3"},"source":["### `%%writefile`, `%pycat`\n","\n","Эти функции позволяют вам сохранить ячейку с кодом в питоновский файл и вывести его содержимое с подсветкой синтаксиса.  \n","Это пригодится вам при работе с `Google Colab` (там нельзя менять `.py`-файлы, только перезаписывать)."]},{"cell_type":"code","source":["%%writefile jupyter_lesson.py\n","import matplotlib.pyplot as plt\n","import numpy as np\n","\n","\n","def plot_batman():\n","    \"\"\"\n","    Функция, которая отрисовывает эмблему Бэтмена.\n","    Реализация честно позаимствована с поста на Медиуме и приведена в читаемый вид:\n","    https://medium.com/@subarnopal/plotting-the-batman-equation-in-python-using-numpy-and-matplotlib-b209b02aed68\n","    \"\"\"\n","    Y = np.arange(-4,4,.005)\n","    X = np.abs(Y / 2) - 0.09137 * Y**2 + np.sqrt(1 - (np.abs(np.abs(Y) - 2)- 1 )**2) - 3\n","\n","    Y1 = np.append(np.arange(-7,-3,.01), np.arange(3,7,.01))\n","    X1 = 3 * np.sqrt(-(Y1 / 7)**2 + 1)\n","\n","    X = np.append(X, X1)\n","    Y = np.append(Y, Y1)\n","\n","    Y1 = np.append(np.arange(-7.,-4,.01), np.arange(4,7.01,.01))\n","    X1 = -3 * np.sqrt(-(Y1 / 7)**2 + 1)\n","\n","    X = np.append(X, X1)\n","    Y = np.append(Y, Y1)\n","\n","    Y1 = np.append(np.arange(-1,-.8,.01), np.arange(.8, 1,.01))\n","    X1 = 9 - 8 * np.abs(Y1)\n","\n","    X = np.append(X, X1)\n","    Y = np.append(Y, Y1)\n","\n","    Y1 = np.arange(-.5,.5,.05)\n","    X1 = np.full_like(Y1, 2)\n","\n","    X = np.append(X, X1)\n","    Y = np.append(Y, Y1)\n","\n","    Y1 = np.append(np.arange(-2.9, -1, .01), np.arange(1, 2.9,.01))\n","    X1 = 1.5 - .5 * np.abs(Y1) - 1.89736 * (np.sqrt(3 - Y1**2 + 2 * np.abs(Y1)) - 2)\n","\n","    X = np.append(X, X1)\n","    Y = np.append(Y, Y1)\n","\n","    Y1 = np.append(np.arange(-.7,-.45,.01), np.arange(.45, .7,.01))\n","    X1 = 3 * np.abs(Y1) + .75\n","\n","    X = np.append(X,X1)\n","    Y = np.append(Y,Y1)\n","\n","    ax = plt.gca()\n","    ax.set_facecolor((0, 0, 0))\n","    ax.plot(Y, X, 'yo')\n","    ax.set_xticklabels([])\n","    ax.set_yticklabels([])"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"1-UWZfcz2-4W","executionInfo":{"status":"ok","timestamp":1663060441505,"user_tz":-180,"elapsed":8,"user":{"displayName":"Sotik Fotik","userId":"11250601100287929999"}},"outputId":"883f3671-6f57-41a8-ac2c-c50c55c3a1ea"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Writing jupyter_lesson.py\n"]}]},{"cell_type":"code","source":["%pycat jupyter_lesson.py"],"metadata":{"id":"SA1L06995IIW"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# !rm jupyter_lesson.py"],"metadata":{"id":"j0M5Jr643DD1"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"b7KU4erWNaqx"},"source":["### `%load_ext`, `%autoreload`\n","\n","`%load_ext` позволяет загружать сторонние модули (например, `Cython`).  Нам важно, что с её помощью можно активировать самую важную команду — `%autoreload`. Без неё вам пришлось бы перезапускать ядро каждый раз, когда вы меняете библиотеки со своим кодом. `autoreload` делает это за вас, в больших проектах это незаменимо."]},{"cell_type":"code","execution_count":null,"metadata":{"ExecuteTime":{"end_time":"2019-10-09T17:56:53.733847Z","start_time":"2019-10-09T17:56:53.722628Z"},"id":"L14gAAUrNaqy"},"outputs":[],"source":["%load_ext autoreload\n","# здесь 2 означает, что все библиотеки будут подгружаться заново,\n","# если только явно не указано иное\n","%autoreload 2\n","\n","import jupyter_lesson"]},{"cell_type":"markdown","metadata":{"id":"LNYUvTYPNaqy"},"source":["### `%matplotlib`\n","\n","Она определяет, каким образом будут отображаться ваши графики. Есть два основных варианта: `inline` и `notebook`.  Разберёмся, в чём между ними разница:"]},{"cell_type":"code","execution_count":null,"metadata":{"ExecuteTime":{"end_time":"2019-10-09T17:57:35.330836Z","start_time":"2019-10-09T17:57:35.083537Z"},"id":"ChDMDkf9Naqy","outputId":"0b967ab1-4b04-4110-b77c-6680465a8f2b","colab":{"base_uri":"https://localhost:8080/","height":17},"executionInfo":{"status":"ok","timestamp":1663060449241,"user_tz":-180,"elapsed":446,"user":{"displayName":"Sotik Fotik","userId":"11250601100287929999"}}},"outputs":[{"output_type":"display_data","data":{"text/plain":["<IPython.core.display.Javascript object>"],"application/javascript":["/* Put everything inside the global mpl namespace */\n","window.mpl = {};\n","\n","\n","mpl.get_websocket_type = function() {\n","    if (typeof(WebSocket) !== 'undefined') {\n","        return WebSocket;\n","    } else if (typeof(MozWebSocket) !== 'undefined') {\n","        return MozWebSocket;\n","    } else {\n","        alert('Your browser does not have WebSocket support. ' +\n","              'Please try Chrome, Safari or Firefox ≥ 6. ' +\n","              'Firefox 4 and 5 are also supported but you ' +\n","              'have to enable WebSockets in about:config.');\n","    };\n","}\n","\n","mpl.figure = function(figure_id, websocket, ondownload, parent_element) {\n","    this.id = figure_id;\n","\n","    this.ws = websocket;\n","\n","    this.supports_binary = (this.ws.binaryType != undefined);\n","\n","    if (!this.supports_binary) {\n","        var warnings = document.getElementById(\"mpl-warnings\");\n","        if (warnings) {\n","            warnings.style.display = 'block';\n","            warnings.textContent = (\n","                \"This browser does not support binary websocket messages. \" +\n","                    \"Performance may be slow.\");\n","        }\n","    }\n","\n","    this.imageObj = new Image();\n","\n","    this.context = undefined;\n","    this.message = undefined;\n","    this.canvas = undefined;\n","    this.rubberband_canvas = undefined;\n","    this.rubberband_context = undefined;\n","    this.format_dropdown = undefined;\n","\n","    this.image_mode = 'full';\n","\n","    this.root = $('<div/>');\n","    this._root_extra_style(this.root)\n","    this.root.attr('style', 'display: inline-block');\n","\n","    $(parent_element).append(this.root);\n","\n","    this._init_header(this);\n","    this._init_canvas(this);\n","    this._init_toolbar(this);\n","\n","    var fig = this;\n","\n","    this.waiting = false;\n","\n","    this.ws.onopen =  function () {\n","            fig.send_message(\"supports_binary\", {value: fig.supports_binary});\n","            fig.send_message(\"send_image_mode\", {});\n","            if (mpl.ratio != 1) {\n","                fig.send_message(\"set_dpi_ratio\", {'dpi_ratio': mpl.ratio});\n","            }\n","            fig.send_message(\"refresh\", {});\n","        }\n","\n","    this.imageObj.onload = function() {\n","            if (fig.image_mode == 'full') {\n","                // Full images could contain transparency (where diff images\n","                // almost always do), so we need to clear the canvas so that\n","                // there is no ghosting.\n","                fig.context.clearRect(0, 0, fig.canvas.width, fig.canvas.height);\n","            }\n","            fig.context.drawImage(fig.imageObj, 0, 0);\n","        };\n","\n","    this.imageObj.onunload = function() {\n","        fig.ws.close();\n","    }\n","\n","    this.ws.onmessage = this._make_on_message_function(this);\n","\n","    this.ondownload = ondownload;\n","}\n","\n","mpl.figure.prototype._init_header = function() {\n","    var titlebar = $(\n","        '<div class=\"ui-dialog-titlebar ui-widget-header ui-corner-all ' +\n","        'ui-helper-clearfix\"/>');\n","    var titletext = $(\n","        '<div class=\"ui-dialog-title\" style=\"width: 100%; ' +\n","        'text-align: center; padding: 3px;\"/>');\n","    titlebar.append(titletext)\n","    this.root.append(titlebar);\n","    this.header = titletext[0];\n","}\n","\n","\n","\n","mpl.figure.prototype._canvas_extra_style = function(canvas_div) {\n","\n","}\n","\n","\n","mpl.figure.prototype._root_extra_style = function(canvas_div) {\n","\n","}\n","\n","mpl.figure.prototype._init_canvas = function() {\n","    var fig = this;\n","\n","    var canvas_div = $('<div/>');\n","\n","    canvas_div.attr('style', 'position: relative; clear: both; outline: 0');\n","\n","    function canvas_keyboard_event(event) {\n","        return fig.key_event(event, event['data']);\n","    }\n","\n","    canvas_div.keydown('key_press', canvas_keyboard_event);\n","    canvas_div.keyup('key_release', canvas_keyboard_event);\n","    this.canvas_div = canvas_div\n","    this._canvas_extra_style(canvas_div)\n","    this.root.append(canvas_div);\n","\n","    var canvas = $('<canvas/>');\n","    canvas.addClass('mpl-canvas');\n","    canvas.attr('style', \"left: 0; top: 0; z-index: 0; outline: 0\")\n","\n","    this.canvas = canvas[0];\n","    this.context = canvas[0].getContext(\"2d\");\n","\n","    var backingStore = this.context.backingStorePixelRatio ||\n","\tthis.context.webkitBackingStorePixelRatio ||\n","\tthis.context.mozBackingStorePixelRatio ||\n","\tthis.context.msBackingStorePixelRatio ||\n","\tthis.context.oBackingStorePixelRatio ||\n","\tthis.context.backingStorePixelRatio || 1;\n","\n","    mpl.ratio = (window.devicePixelRatio || 1) / backingStore;\n","\n","    var rubberband = $('<canvas/>');\n","    rubberband.attr('style', \"position: absolute; left: 0; top: 0; z-index: 1;\")\n","\n","    var pass_mouse_events = true;\n","\n","    canvas_div.resizable({\n","        start: function(event, ui) {\n","            pass_mouse_events = false;\n","        },\n","        resize: function(event, ui) {\n","            fig.request_resize(ui.size.width, ui.size.height);\n","        },\n","        stop: function(event, ui) {\n","            pass_mouse_events = true;\n","            fig.request_resize(ui.size.width, ui.size.height);\n","        },\n","    });\n","\n","    function mouse_event_fn(event) {\n","        if (pass_mouse_events)\n","            return fig.mouse_event(event, event['data']);\n","    }\n","\n","    rubberband.mousedown('button_press', mouse_event_fn);\n","    rubberband.mouseup('button_release', mouse_event_fn);\n","    // Throttle sequential mouse events to 1 every 20ms.\n","    rubberband.mousemove('motion_notify', mouse_event_fn);\n","\n","    rubberband.mouseenter('figure_enter', mouse_event_fn);\n","    rubberband.mouseleave('figure_leave', mouse_event_fn);\n","\n","    canvas_div.on(\"wheel\", function (event) {\n","        event = event.originalEvent;\n","        event['data'] = 'scroll'\n","        if (event.deltaY < 0) {\n","            event.step = 1;\n","        } else {\n","            event.step = -1;\n","        }\n","        mouse_event_fn(event);\n","    });\n","\n","    canvas_div.append(canvas);\n","    canvas_div.append(rubberband);\n","\n","    this.rubberband = rubberband;\n","    this.rubberband_canvas = rubberband[0];\n","    this.rubberband_context = rubberband[0].getContext(\"2d\");\n","    this.rubberband_context.strokeStyle = \"#000000\";\n","\n","    this._resize_canvas = function(width, height) {\n","        // Keep the size of the canvas, canvas container, and rubber band\n","        // canvas in synch.\n","        canvas_div.css('width', width)\n","        canvas_div.css('height', height)\n","\n","        canvas.attr('width', width * mpl.ratio);\n","        canvas.attr('height', height * mpl.ratio);\n","        canvas.attr('style', 'width: ' + width + 'px; height: ' + height + 'px;');\n","\n","        rubberband.attr('width', width);\n","        rubberband.attr('height', height);\n","    }\n","\n","    // Set the figure to an initial 600x600px, this will subsequently be updated\n","    // upon first draw.\n","    this._resize_canvas(600, 600);\n","\n","    // Disable right mouse context menu.\n","    $(this.rubberband_canvas).bind(\"contextmenu\",function(e){\n","        return false;\n","    });\n","\n","    function set_focus () {\n","        canvas.focus();\n","        canvas_div.focus();\n","    }\n","\n","    window.setTimeout(set_focus, 100);\n","}\n","\n","mpl.figure.prototype._init_toolbar = function() {\n","    var fig = this;\n","\n","    var nav_element = $('<div/>');\n","    nav_element.attr('style', 'width: 100%');\n","    this.root.append(nav_element);\n","\n","    // Define a callback function for later on.\n","    function toolbar_event(event) {\n","        return fig.toolbar_button_onclick(event['data']);\n","    }\n","    function toolbar_mouse_event(event) {\n","        return fig.toolbar_button_onmouseover(event['data']);\n","    }\n","\n","    for(var toolbar_ind in mpl.toolbar_items) {\n","        var name = mpl.toolbar_items[toolbar_ind][0];\n","        var tooltip = mpl.toolbar_items[toolbar_ind][1];\n","        var image = mpl.toolbar_items[toolbar_ind][2];\n","        var method_name = mpl.toolbar_items[toolbar_ind][3];\n","\n","        if (!name) {\n","            // put a spacer in here.\n","            continue;\n","        }\n","        var button = $('<button/>');\n","        button.addClass('ui-button ui-widget ui-state-default ui-corner-all ' +\n","                        'ui-button-icon-only');\n","        button.attr('role', 'button');\n","        button.attr('aria-disabled', 'false');\n","        button.click(method_name, toolbar_event);\n","        button.mouseover(tooltip, toolbar_mouse_event);\n","\n","        var icon_img = $('<span/>');\n","        icon_img.addClass('ui-button-icon-primary ui-icon');\n","        icon_img.addClass(image);\n","        icon_img.addClass('ui-corner-all');\n","\n","        var tooltip_span = $('<span/>');\n","        tooltip_span.addClass('ui-button-text');\n","        tooltip_span.html(tooltip);\n","\n","        button.append(icon_img);\n","        button.append(tooltip_span);\n","\n","        nav_element.append(button);\n","    }\n","\n","    var fmt_picker_span = $('<span/>');\n","\n","    var fmt_picker = $('<select/>');\n","    fmt_picker.addClass('mpl-toolbar-option ui-widget ui-widget-content');\n","    fmt_picker_span.append(fmt_picker);\n","    nav_element.append(fmt_picker_span);\n","    this.format_dropdown = fmt_picker[0];\n","\n","    for (var ind in mpl.extensions) {\n","        var fmt = mpl.extensions[ind];\n","        var option = $(\n","            '<option/>', {selected: fmt === mpl.default_extension}).html(fmt);\n","        fmt_picker.append(option);\n","    }\n","\n","    // Add hover states to the ui-buttons\n","    $( \".ui-button\" ).hover(\n","        function() { $(this).addClass(\"ui-state-hover\");},\n","        function() { $(this).removeClass(\"ui-state-hover\");}\n","    );\n","\n","    var status_bar = $('<span class=\"mpl-message\"/>');\n","    nav_element.append(status_bar);\n","    this.message = status_bar[0];\n","}\n","\n","mpl.figure.prototype.request_resize = function(x_pixels, y_pixels) {\n","    // Request matplotlib to resize the figure. Matplotlib will then trigger a resize in the client,\n","    // which will in turn request a refresh of the image.\n","    this.send_message('resize', {'width': x_pixels, 'height': y_pixels});\n","}\n","\n","mpl.figure.prototype.send_message = function(type, properties) {\n","    properties['type'] = type;\n","    properties['figure_id'] = this.id;\n","    this.ws.send(JSON.stringify(properties));\n","}\n","\n","mpl.figure.prototype.send_draw_message = function() {\n","    if (!this.waiting) {\n","        this.waiting = true;\n","        this.ws.send(JSON.stringify({type: \"draw\", figure_id: this.id}));\n","    }\n","}\n","\n","\n","mpl.figure.prototype.handle_save = function(fig, msg) {\n","    var format_dropdown = fig.format_dropdown;\n","    var format = format_dropdown.options[format_dropdown.selectedIndex].value;\n","    fig.ondownload(fig, format);\n","}\n","\n","\n","mpl.figure.prototype.handle_resize = function(fig, msg) {\n","    var size = msg['size'];\n","    if (size[0] != fig.canvas.width || size[1] != fig.canvas.height) {\n","        fig._resize_canvas(size[0], size[1]);\n","        fig.send_message(\"refresh\", {});\n","    };\n","}\n","\n","mpl.figure.prototype.handle_rubberband = function(fig, msg) {\n","    var x0 = msg['x0'] / mpl.ratio;\n","    var y0 = (fig.canvas.height - msg['y0']) / mpl.ratio;\n","    var x1 = msg['x1'] / mpl.ratio;\n","    var y1 = (fig.canvas.height - msg['y1']) / mpl.ratio;\n","    x0 = Math.floor(x0) + 0.5;\n","    y0 = Math.floor(y0) + 0.5;\n","    x1 = Math.floor(x1) + 0.5;\n","    y1 = Math.floor(y1) + 0.5;\n","    var min_x = Math.min(x0, x1);\n","    var min_y = Math.min(y0, y1);\n","    var width = Math.abs(x1 - x0);\n","    var height = Math.abs(y1 - y0);\n","\n","    fig.rubberband_context.clearRect(\n","        0, 0, fig.canvas.width / mpl.ratio, fig.canvas.height / mpl.ratio);\n","\n","    fig.rubberband_context.strokeRect(min_x, min_y, width, height);\n","}\n","\n","mpl.figure.prototype.handle_figure_label = function(fig, msg) {\n","    // Updates the figure title.\n","    fig.header.textContent = msg['label'];\n","}\n","\n","mpl.figure.prototype.handle_cursor = function(fig, msg) {\n","    var cursor = msg['cursor'];\n","    switch(cursor)\n","    {\n","    case 0:\n","        cursor = 'pointer';\n","        break;\n","    case 1:\n","        cursor = 'default';\n","        break;\n","    case 2:\n","        cursor = 'crosshair';\n","        break;\n","    case 3:\n","        cursor = 'move';\n","        break;\n","    }\n","    fig.rubberband_canvas.style.cursor = cursor;\n","}\n","\n","mpl.figure.prototype.handle_message = function(fig, msg) {\n","    fig.message.textContent = msg['message'];\n","}\n","\n","mpl.figure.prototype.handle_draw = function(fig, msg) {\n","    // Request the server to send over a new figure.\n","    fig.send_draw_message();\n","}\n","\n","mpl.figure.prototype.handle_image_mode = function(fig, msg) {\n","    fig.image_mode = msg['mode'];\n","}\n","\n","mpl.figure.prototype.updated_canvas_event = function() {\n","    // Called whenever the canvas gets updated.\n","    this.send_message(\"ack\", {});\n","}\n","\n","// A function to construct a web socket function for onmessage handling.\n","// Called in the figure constructor.\n","mpl.figure.prototype._make_on_message_function = function(fig) {\n","    return function socket_on_message(evt) {\n","        if (evt.data instanceof Blob) {\n","            /* FIXME: We get \"Resource interpreted as Image but\n","             * transferred with MIME type text/plain:\" errors on\n","             * Chrome.  But how to set the MIME type?  It doesn't seem\n","             * to be part of the websocket stream */\n","            evt.data.type = \"image/png\";\n","\n","            /* Free the memory for the previous frames */\n","            if (fig.imageObj.src) {\n","                (window.URL || window.webkitURL).revokeObjectURL(\n","                    fig.imageObj.src);\n","            }\n","\n","            fig.imageObj.src = (window.URL || window.webkitURL).createObjectURL(\n","                evt.data);\n","            fig.updated_canvas_event();\n","            fig.waiting = false;\n","            return;\n","        }\n","        else if (typeof evt.data === 'string' && evt.data.slice(0, 21) == \"data:image/png;base64\") {\n","            fig.imageObj.src = evt.data;\n","            fig.updated_canvas_event();\n","            fig.waiting = false;\n","            return;\n","        }\n","\n","        var msg = JSON.parse(evt.data);\n","        var msg_type = msg['type'];\n","\n","        // Call the  \"handle_{type}\" callback, which takes\n","        // the figure and JSON message as its only arguments.\n","        try {\n","            var callback = fig[\"handle_\" + msg_type];\n","        } catch (e) {\n","            console.log(\"No handler for the '\" + msg_type + \"' message type: \", msg);\n","            return;\n","        }\n","\n","        if (callback) {\n","            try {\n","                // console.log(\"Handling '\" + msg_type + \"' message: \", msg);\n","                callback(fig, msg);\n","            } catch (e) {\n","                console.log(\"Exception inside the 'handler_\" + msg_type + \"' callback:\", e, e.stack, msg);\n","            }\n","        }\n","    };\n","}\n","\n","// from http://stackoverflow.com/questions/1114465/getting-mouse-location-in-canvas\n","mpl.findpos = function(e) {\n","    //this section is from http://www.quirksmode.org/js/events_properties.html\n","    var targ;\n","    if (!e)\n","        e = window.event;\n","    if (e.target)\n","        targ = e.target;\n","    else if (e.srcElement)\n","        targ = e.srcElement;\n","    if (targ.nodeType == 3) // defeat Safari bug\n","        targ = targ.parentNode;\n","\n","    // jQuery normalizes the pageX and pageY\n","    // pageX,Y are the mouse positions relative to the document\n","    // offset() returns the position of the element relative to the document\n","    var x = e.pageX - $(targ).offset().left;\n","    var y = e.pageY - $(targ).offset().top;\n","\n","    return {\"x\": x, \"y\": y};\n","};\n","\n","/*\n"," * return a copy of an object with only non-object keys\n"," * we need this to avoid circular references\n"," * http://stackoverflow.com/a/24161582/3208463\n"," */\n","function simpleKeys (original) {\n","  return Object.keys(original).reduce(function (obj, key) {\n","    if (typeof original[key] !== 'object')\n","        obj[key] = original[key]\n","    return obj;\n","  }, {});\n","}\n","\n","mpl.figure.prototype.mouse_event = function(event, name) {\n","    var canvas_pos = mpl.findpos(event)\n","\n","    if (name === 'button_press')\n","    {\n","        this.canvas.focus();\n","        this.canvas_div.focus();\n","    }\n","\n","    var x = canvas_pos.x * mpl.ratio;\n","    var y = canvas_pos.y * mpl.ratio;\n","\n","    this.send_message(name, {x: x, y: y, button: event.button,\n","                             step: event.step,\n","                             guiEvent: simpleKeys(event)});\n","\n","    /* This prevents the web browser from automatically changing to\n","     * the text insertion cursor when the button is pressed.  We want\n","     * to control all of the cursor setting manually through the\n","     * 'cursor' event from matplotlib */\n","    event.preventDefault();\n","    return false;\n","}\n","\n","mpl.figure.prototype._key_event_extra = function(event, name) {\n","    // Handle any extra behaviour associated with a key event\n","}\n","\n","mpl.figure.prototype.key_event = function(event, name) {\n","\n","    // Prevent repeat events\n","    if (name == 'key_press')\n","    {\n","        if (event.which === this._key)\n","            return;\n","        else\n","            this._key = event.which;\n","    }\n","    if (name == 'key_release')\n","        this._key = null;\n","\n","    var value = '';\n","    if (event.ctrlKey && event.which != 17)\n","        value += \"ctrl+\";\n","    if (event.altKey && event.which != 18)\n","        value += \"alt+\";\n","    if (event.shiftKey && event.which != 16)\n","        value += \"shift+\";\n","\n","    value += 'k';\n","    value += event.which.toString();\n","\n","    this._key_event_extra(event, name);\n","\n","    this.send_message(name, {key: value,\n","                             guiEvent: simpleKeys(event)});\n","    return false;\n","}\n","\n","mpl.figure.prototype.toolbar_button_onclick = function(name) {\n","    if (name == 'download') {\n","        this.handle_save(this, null);\n","    } else {\n","        this.send_message(\"toolbar_button\", {name: name});\n","    }\n","};\n","\n","mpl.figure.prototype.toolbar_button_onmouseover = function(tooltip) {\n","    this.message.textContent = tooltip;\n","};\n","mpl.toolbar_items = [[\"Home\", \"Reset original view\", \"fa fa-home icon-home\", \"home\"], [\"Back\", \"Back to previous view\", \"fa fa-arrow-left icon-arrow-left\", \"back\"], [\"Forward\", \"Forward to next view\", \"fa fa-arrow-right icon-arrow-right\", \"forward\"], [\"\", \"\", \"\", \"\"], [\"Pan\", \"Pan axes with left mouse, zoom with right\", \"fa fa-arrows icon-move\", \"pan\"], [\"Zoom\", \"Zoom to rectangle\", \"fa fa-square-o icon-check-empty\", \"zoom\"], [\"\", \"\", \"\", \"\"], [\"Download\", \"Download plot\", \"fa fa-floppy-o icon-save\", \"download\"]];\n","\n","mpl.extensions = [\"eps\", \"jpeg\", \"pdf\", \"png\", \"ps\", \"raw\", \"svg\", \"tif\"];\n","\n","mpl.default_extension = \"png\";var comm_websocket_adapter = function(comm) {\n","    // Create a \"websocket\"-like object which calls the given IPython comm\n","    // object with the appropriate methods. Currently this is a non binary\n","    // socket, so there is still some room for performance tuning.\n","    var ws = {};\n","\n","    ws.close = function() {\n","        comm.close()\n","    };\n","    ws.send = function(m) {\n","        //console.log('sending', m);\n","        comm.send(m);\n","    };\n","    // Register the callback with on_msg.\n","    comm.on_msg(function(msg) {\n","        //console.log('receiving', msg['content']['data'], msg);\n","        // Pass the mpl event to the overridden (by mpl) onmessage function.\n","        ws.onmessage(msg['content']['data'])\n","    });\n","    return ws;\n","}\n","\n","mpl.mpl_figure_comm = function(comm, msg) {\n","    // This is the function which gets called when the mpl process\n","    // starts-up an IPython Comm through the \"matplotlib\" channel.\n","\n","    var id = msg.content.data.id;\n","    // Get hold of the div created by the display call when the Comm\n","    // socket was opened in Python.\n","    var element = $(\"#\" + id);\n","    var ws_proxy = comm_websocket_adapter(comm)\n","\n","    function ondownload(figure, format) {\n","        window.open(figure.imageObj.src);\n","    }\n","\n","    var fig = new mpl.figure(id, ws_proxy,\n","                           ondownload,\n","                           element.get(0));\n","\n","    // Call onopen now - mpl needs it, as it is assuming we've passed it a real\n","    // web socket which is closed, not our websocket->open comm proxy.\n","    ws_proxy.onopen();\n","\n","    fig.parent_element = element.get(0);\n","    fig.cell_info = mpl.find_output_cell(\"<div id='\" + id + \"'></div>\");\n","    if (!fig.cell_info) {\n","        console.error(\"Failed to find cell for figure\", id, fig);\n","        return;\n","    }\n","\n","    var output_index = fig.cell_info[2]\n","    var cell = fig.cell_info[0];\n","\n","};\n","\n","mpl.figure.prototype.handle_close = function(fig, msg) {\n","    var width = fig.canvas.width/mpl.ratio\n","    fig.root.unbind('remove')\n","\n","    // Update the output cell to use the data from the current canvas.\n","    fig.push_to_output();\n","    var dataURL = fig.canvas.toDataURL();\n","    // Re-enable the keyboard manager in IPython - without this line, in FF,\n","    // the notebook keyboard shortcuts fail.\n","    IPython.keyboard_manager.enable()\n","    $(fig.parent_element).html('<img src=\"' + dataURL + '\" width=\"' + width + '\">');\n","    fig.close_ws(fig, msg);\n","}\n","\n","mpl.figure.prototype.close_ws = function(fig, msg){\n","    fig.send_message('closing', msg);\n","    // fig.ws.close()\n","}\n","\n","mpl.figure.prototype.push_to_output = function(remove_interactive) {\n","    // Turn the data on the canvas into data in the output cell.\n","    var width = this.canvas.width/mpl.ratio\n","    var dataURL = this.canvas.toDataURL();\n","    this.cell_info[1]['text/html'] = '<img src=\"' + dataURL + '\" width=\"' + width + '\">';\n","}\n","\n","mpl.figure.prototype.updated_canvas_event = function() {\n","    // Tell IPython that the notebook contents must change.\n","    IPython.notebook.set_dirty(true);\n","    this.send_message(\"ack\", {});\n","    var fig = this;\n","    // Wait a second, then push the new image to the DOM so\n","    // that it is saved nicely (might be nice to debounce this).\n","    setTimeout(function () { fig.push_to_output() }, 1000);\n","}\n","\n","mpl.figure.prototype._init_toolbar = function() {\n","    var fig = this;\n","\n","    var nav_element = $('<div/>');\n","    nav_element.attr('style', 'width: 100%');\n","    this.root.append(nav_element);\n","\n","    // Define a callback function for later on.\n","    function toolbar_event(event) {\n","        return fig.toolbar_button_onclick(event['data']);\n","    }\n","    function toolbar_mouse_event(event) {\n","        return fig.toolbar_button_onmouseover(event['data']);\n","    }\n","\n","    for(var toolbar_ind in mpl.toolbar_items){\n","        var name = mpl.toolbar_items[toolbar_ind][0];\n","        var tooltip = mpl.toolbar_items[toolbar_ind][1];\n","        var image = mpl.toolbar_items[toolbar_ind][2];\n","        var method_name = mpl.toolbar_items[toolbar_ind][3];\n","\n","        if (!name) { continue; };\n","\n","        var button = $('<button class=\"btn btn-default\" href=\"#\" title=\"' + name + '\"><i class=\"fa ' + image + ' fa-lg\"></i></button>');\n","        button.click(method_name, toolbar_event);\n","        button.mouseover(tooltip, toolbar_mouse_event);\n","        nav_element.append(button);\n","    }\n","\n","    // Add the status bar.\n","    var status_bar = $('<span class=\"mpl-message\" style=\"text-align:right; float: right;\"/>');\n","    nav_element.append(status_bar);\n","    this.message = status_bar[0];\n","\n","    // Add the close button to the window.\n","    var buttongrp = $('<div class=\"btn-group inline pull-right\"></div>');\n","    var button = $('<button class=\"btn btn-mini btn-primary\" href=\"#\" title=\"Stop Interaction\"><i class=\"fa fa-power-off icon-remove icon-large\"></i></button>');\n","    button.click(function (evt) { fig.handle_close(fig, {}); } );\n","    button.mouseover('Stop Interaction', toolbar_mouse_event);\n","    buttongrp.append(button);\n","    var titlebar = this.root.find($('.ui-dialog-titlebar'));\n","    titlebar.prepend(buttongrp);\n","}\n","\n","mpl.figure.prototype._root_extra_style = function(el){\n","    var fig = this\n","    el.on(\"remove\", function(){\n","\tfig.close_ws(fig, {});\n","    });\n","}\n","\n","mpl.figure.prototype._canvas_extra_style = function(el){\n","    // this is important to make the div 'focusable\n","    el.attr('tabindex', 0)\n","    // reach out to IPython and tell the keyboard manager to turn it's self\n","    // off when our div gets focus\n","\n","    // location in version 3\n","    if (IPython.notebook.keyboard_manager) {\n","        IPython.notebook.keyboard_manager.register_events(el);\n","    }\n","    else {\n","        // location in version 2\n","        IPython.keyboard_manager.register_events(el);\n","    }\n","\n","}\n","\n","mpl.figure.prototype._key_event_extra = function(event, name) {\n","    var manager = IPython.notebook.keyboard_manager;\n","    if (!manager)\n","        manager = IPython.keyboard_manager;\n","\n","    // Check for shift+enter\n","    if (event.shiftKey && event.which == 13) {\n","        this.canvas_div.blur();\n","        // select the cell after this one\n","        var index = IPython.notebook.find_cell_index(this.cell_info[0]);\n","        IPython.notebook.select(index + 1);\n","    }\n","}\n","\n","mpl.figure.prototype.handle_save = function(fig, msg) {\n","    fig.ondownload(fig, null);\n","}\n","\n","\n","mpl.find_output_cell = function(html_output) {\n","    // Return the cell and output element which can be found *uniquely* in the notebook.\n","    // Note - this is a bit hacky, but it is done because the \"notebook_saving.Notebook\"\n","    // IPython event is triggered only after the cells have been serialised, which for\n","    // our purposes (turning an active figure into a static one), is too late.\n","    var cells = IPython.notebook.get_cells();\n","    var ncells = cells.length;\n","    for (var i=0; i<ncells; i++) {\n","        var cell = cells[i];\n","        if (cell.cell_type === 'code'){\n","            for (var j=0; j<cell.output_area.outputs.length; j++) {\n","                var data = cell.output_area.outputs[j];\n","                if (data.data) {\n","                    // IPython >= 3 moved mimebundle to data attribute of output\n","                    data = data.data;\n","                }\n","                if (data['text/html'] == html_output) {\n","                    return [cell, data, j];\n","                }\n","            }\n","        }\n","    }\n","}\n","\n","// Register the function which deals with the matplotlib target/channel.\n","// The kernel may be null if the page has been refreshed.\n","if (IPython.notebook.kernel != null) {\n","    IPython.notebook.kernel.comm_manager.register_target('matplotlib', mpl.mpl_figure_comm);\n","}\n"]},"metadata":{}},{"output_type":"display_data","data":{"text/plain":["<IPython.core.display.HTML object>"],"text/html":["<div id='5cd24c7c-97b7-4490-ade4-6c3ec2424e59'></div>"]},"metadata":{}}],"source":["%matplotlib notebook\n","\n","jupyter_lesson.plot_batman()"]},{"cell_type":"markdown","metadata":{"id":"O3z_NFzZNaqz"},"source":["Видно, что открылось интерактивное окошко, в котором можно масштабировать участки графика по своему усмотрению. Это удобно, когда хочется рассмотреть детали, но требовательно к ресурсам при сложных визуализациях. А ещё работает не всегда."]},{"cell_type":"code","execution_count":null,"metadata":{"ExecuteTime":{"end_time":"2019-10-09T17:57:27.417697Z","start_time":"2019-10-09T17:57:27.304286Z"},"id":"eLFKJC7NNaqz","outputId":"7e51a4e1-d9b3-4db4-d1b2-b654c1a94bd3","colab":{"base_uri":"https://localhost:8080/","height":252},"executionInfo":{"status":"ok","timestamp":1663060452423,"user_tz":-180,"elapsed":367,"user":{"displayName":"Sotik Fotik","userId":"11250601100287929999"}}},"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 432x288 with 1 Axes>"],"image/png":"\n"},"metadata":{"needs_background":"light"}}],"source":["%matplotlib inline\n","\n","jupyter_lesson.plot_batman()"]},{"cell_type":"markdown","metadata":{"id":"CK5TdlNbNaqz"},"source":["В этом режиме в ноутбук просто вставляется статическая картинка.  Именно этим режимом вы будете пользоваться чаще всего."]},{"cell_type":"markdown","metadata":{"id":"dqFw3GAoNaqz"},"source":["### `%time`, `%timeit`, `%%time`\n","\n","Эти три команды замеряют, как долго исполняется код.  Коменда `%timeit` запускает команду несколько раз. По результатам вычисляется среднее и стандартное отклонение. Это уместно, если функция зависит от случайных битов. Для примера напишем функцию, которая генерирует случайное число и засыпает на одну секунду, если оно нечётное."]},{"cell_type":"code","execution_count":null,"metadata":{"ExecuteTime":{"end_time":"2019-10-09T17:36:25.515732Z","start_time":"2019-10-09T17:36:25.512886Z"},"id":"p6zYBVt_Naq0"},"outputs":[],"source":["import time\n","import numpy as np\n","\n","def sleep_if_odd():\n","    rvs = np.random.randint(low=0, high=int(1e9))\n","    randbit = rvs % 2\n","    if randbit % 2 == 1:\n","        time.sleep(1)"]},{"cell_type":"code","execution_count":null,"metadata":{"ExecuteTime":{"end_time":"2019-10-09T17:36:06.903098Z","start_time":"2019-10-09T17:36:05.899181Z"},"id":"8TyrsvP-Naq0","outputId":"4da7a6dd-32fd-4b41-fa79-6255cc21f260","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1663060457601,"user_tz":-180,"elapsed":1001,"user":{"displayName":"Sotik Fotik","userId":"11250601100287929999"}}},"outputs":[{"output_type":"stream","name":"stdout","text":["CPU times: user 5.72 ms, sys: 3.98 ms, total: 9.7 ms\n","Wall time: 1 s\n"]}],"source":["%time sleep_if_odd()"]},{"cell_type":"markdown","metadata":{"id":"IzsDbdZuNaq0"},"source":["При использовании `%timeit` можно указать, сколько раз нужно запустить функцию. Синтаксис — `%timeit -n` Дефолтное значение — 7."]},{"cell_type":"code","execution_count":null,"metadata":{"ExecuteTime":{"end_time":"2019-10-09T19:17:53.490855Z","start_time":"2019-10-09T19:17:19.221307Z"},"id":"IkUn0voNNaq1","outputId":"8bc788f9-e6ae-44ae-814d-60c423f0cf20","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1663060473455,"user_tz":-180,"elapsed":13035,"user":{"displayName":"Sotik Fotik","userId":"11250601100287929999"}}},"outputs":[{"output_type":"stream","name":"stdout","text":["667 ms ± 178 ms per loop (mean ± std. dev. of 7 runs, 3 loops each)\n"]}],"source":["%timeit -n 3 sleep_if_odd()"]},{"cell_type":"markdown","metadata":{"id":"I4IVQThpNaq1"},"source":["Видно, что только результаты `%timeit` отражают реальное поведение функции. Это стоит иметь в виду при тестировании кода."]},{"cell_type":"markdown","metadata":{"id":"A3tjQbAvNaq1"},"source":["### `%system`, `%%bash`\n","\n","Позволяет выполнять системные команды так, будто вы работаете в терминале."]},{"cell_type":"code","execution_count":null,"metadata":{"ExecuteTime":{"end_time":"2019-10-09T18:08:35.316032Z","start_time":"2019-10-09T18:08:35.089326Z"},"id":"0mYT5xd0Naq1","outputId":"0f1ae940-3117-4ba1-9abc-0cac59f104d0","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1663060540404,"user_tz":-180,"elapsed":348,"user":{"displayName":"Sotik Fotik","userId":"11250601100287929999"}}},"outputs":[{"output_type":"execute_result","data":{"text/plain":["['Tue Sep 13 09:15:40 UTC 2022']"]},"metadata":{},"execution_count":15}],"source":["%system date"]},{"cell_type":"markdown","metadata":{"id":"zZY86hJ1Naq2"},"source":["Отметим, что для этого есть удобный альтернативный синтаксис:"]},{"cell_type":"code","execution_count":null,"metadata":{"ExecuteTime":{"end_time":"2019-10-09T18:09:01.087908Z","start_time":"2019-10-09T18:09:00.962325Z"},"id":"OX7ma3npNaq2","outputId":"f2715510-7d47-45a4-caa5-daf30c78a498","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1663060542734,"user_tz":-180,"elapsed":603,"user":{"displayName":"Sotik Fotik","userId":"11250601100287929999"}}},"outputs":[{"output_type":"stream","name":"stdout","text":["Tue Sep 13 09:15:42 UTC 2022\n"]}],"source":["!date"]},{"cell_type":"markdown","metadata":{"id":"4uid1UwHNaq2"},"source":["С помощью команды `%%bash` можно вызвать многострочный скрипт на баше:"]},{"cell_type":"code","execution_count":null,"metadata":{"ExecuteTime":{"end_time":"2019-10-09T19:19:26.772744Z","start_time":"2019-10-09T19:19:26.557139Z"},"id":"w8lN8P4YNaq2","outputId":"ce1e32f4-0fa6-4272-d456-88346221edf2","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1663060544278,"user_tz":-180,"elapsed":8,"user":{"displayName":"Sotik Fotik","userId":"11250601100287929999"}}},"outputs":[{"output_type":"stream","name":"stdout","text":["{IPython,\n","and,\n","bash\n","are,\n","friends!}\n"]}],"source":["%%bash\n","\n","for word in {'IPython', 'and', 'bash' 'are', 'friends!'}\n","do\n","    echo $word\n","done"]},{"cell_type":"code","source":["# !top"],"metadata":{"id":"_kouPTkM403C"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["Ссылки:\n","\n","1) https://mipt-stats.gitlab.io/courses/python/02_jupyter.html\n","\n","2) https://colab.research.google.com/?utm_source=scs-index#scrollTo=-Rh3-Vt9Nev9"],"metadata":{"id":"KZDTrXN_xb-V"}},{"cell_type":"code","source":[],"metadata":{"id":"GLxu-eE4xgV3"},"execution_count":null,"outputs":[]}],"metadata":{"colab":{"provenance":[{"file_id":"1taL_8yq3HhQt9irtZEPuATweEdL23q4z","timestamp":1663059954748}]},"kernelspec":{"display_name":"Python 3","language":"python","name":"python3"},"language_info":{"codemirror_mode":{"name":"ipython","version":3},"file_extension":".py","mimetype":"text/x-python","name":"python","nbconvert_exporter":"python","pygments_lexer":"ipython3","version":"3.8.5"},"varInspector":{"cols":{"lenName":16,"lenType":16,"lenVar":40},"kernels_config":{"python":{"delete_cmd_postfix":"","delete_cmd_prefix":"del ","library":"var_list.py","varRefreshCmd":"print(var_dic_list())"},"r":{"delete_cmd_postfix":") ","delete_cmd_prefix":"rm(","library":"var_list.r","varRefreshCmd":"cat(var_dic_list()) "}},"types_to_exclude":["module","function","builtin_function_or_method","instance","_Feature"],"window_display":false}},"nbformat":4,"nbformat_minor":0}